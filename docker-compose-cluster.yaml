version: "3.9"

x-kafka-image: &kafka-image docker.io/bitnami/kafka:3.5.1

x-kraft: &kraft-vars
  KAFKA_KRAFT_CLUSTER_ID: 'WNfE3WMTRRGBs35BikbfRg'
  BITNAMI_DEBUG: 'yes'
  ALLOW_PLAINTEXT_LISTENER: 'yes'
  KAFKA_ENABLE_KRAFT: 'yes'
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
  KAFKA_CFG_DELETE_TOPIC_ENABLE: 'true'
  KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
  KAFKA_CFG_LOG_RETENTION_HOURS: 48  # 2 days of retention for demo purposes
#  KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 2
#  KAFKA_CFG_OFFETS_TOPIC_REPLICATION_FACTOR: 2
#  KAFKA_CFG_NUM_PARTITIONS: 3



services:

  kafka-1:
    networks:
      kafka-net:
        ipv4_address: 172.28.1.1
    image: *kafka-image
    restart: unless-stopped
    ports:
      - '9094:9094'
    environment:
      <<: *kraft-vars
      KAFKA_CFG_PROCESS_ROLES: controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: &kraft-quorum 1@172.28.1.1:9093
    volumes:
      - kafka_1:/bitnami/kafka

  kafka-2:
    networks:
      kafka-net:
        ipv4_address: 172.28.1.2
    image: *kafka-image
    restart: unless-stopped
    depends_on:
      - kafka-1
    ports:
      - '9092:9092'
    environment:
      <<: *kraft-vars
      KAFKA_CFG_PROCESS_ROLES: broker
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: *kraft-quorum
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # https://rmoff.net/2018/08/02/kafka-listeners-explained/
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://172.28.1.2:9092
    volumes:
      - kafka_2:/bitnami/kafka

  kafka-3:
    networks:
      kafka-net:
        ipv4_address: 172.28.1.3
    image: *kafka-image
    ports:
      - '9192:9092'
    environment:
      <<: *kraft-vars
      KAFKA_CFG_PROCESS_ROLES: broker
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: *kraft-quorum
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # https://rmoff.net/2018/08/02/kafka-listeners-explained/
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://172.28.1.3:9092
    volumes:
      - kafka_2:/bitnami/kafka

  kafka-ui:
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      kafka-net:
        ipv4_address: 172.28.1.4
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - '3000:8080'
    volumes:
      - ./config/kui-config-cluster.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      - DYNAMIC_CONFIG_ENABLED=true

  minio:
    restart: on-failure
    networks:
      kafka-net:
        ipv4_address: 172.28.1.5
    image: bitnami/minio:2023.7.18-debian-11-r2
    ports:
      - '3002:9001'
    volumes:
      - minio:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=abc123456
      - MINIO_DEFAULT_BUCKETS=diff-data

networks:

  kafka-net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:

  kafka_0:
    driver: local
  kafka_1:
    driver: local
  kafka_2:
    driver: local
  minio:
    driver: local
